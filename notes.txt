Advanced Python
===============
Toby Dussek


all my code will be here:
https://github.com/onionmccabbage/PythonAdvOct2024

9:30 start
11:00 morning break until 11:15
12:25 lunch (1 hr)
3:00 afternoon break until 3:20
4:30 end

You will need:
- a copy of Python 3.x
- an editor (e.g. VS Code, PyCharm etc.)
- internet, able to install python libraries (e.g. requests library)

Python code lives in classes (or in functions), in modules, which live in packages (folders)

Monday
> intro and welcome
  > what do you currently know
  > what do you want to know
> classes 
> what is -> str all about....?
> mini review exercise
> abstract and concrete classes
- validate types: isinstance, type, int(float())
> inheritance
> name mangled members
> using slots with classes
- if __name__== '__main__'
> using decorators
- which kind of Python...
> after lunch review
> functional programming: map, filter and reduce  
> functional programming: parameters
> comprehensions, generators and yield
> Loading local and remote data (requests)

Tuesday
> the course website: https://s3.eu-west-1.amazonaws.com/neueda.conygre.com/Sites/Ericsson_Advanced_Python/site/index.html
> the recordings: username student password Belfast2024
> available for a week or two (then deleted)
> call class method from within - need to use 'self.methodname()'
> processing text/json
  > json.loads() takes JSON and returns Python structure
  > json.dumps() takes Python structure and returns JSON
> persisting files: read/write/append/exclusive/overwrite, text, bytes, json
> redirect stdout
> databases
  see https://wiki.python.org/moin/DatabaseProgramming
> other db connections
  Postgres https://www.psycopg.org/
> Create, Read and Update (and Delete) - CRUD operations
> populate db with sample data
> read and nicely format values from the db
> explore external API as a remote data source for JSON
> after lunch review exercise 
  ask questions, help each other, share code
> we will be using the 'requests' library
  (you may come across the urllib.requests which is the old-skool way of doing things)

Wednesday
> context manager to switch context e.g. for handling data input and output
> networking server/client (microservices)
  anybody using microservices in Python already?
> overview of Flask
  see https://flask.palletsprojects.com/en/3.0.x/
- after lunch lab exercise
- doctest
  see https://docs.python.org/3/library/doctest.html
- unittest and pytest see https://docs.pytest.org/

Thursday
- profiling: timings etc. (cprofile)
- multithreading, also limits of mutlithreading concurrency
  - how threads are done
  - concurrency and resources (lock shared resources)
- the global Interpreter Lock (GIL) will affect threading performance
  the classic cpython will be stymied by the GIL
  jython (Java) an ironpython (.NET) are NOT limited in this way
- using thread locks
- using thread events
- Python has -O to optimize code (especially useful for threading)
  -O will attempt to optimize the code; especially good for threading
- logging, context manager, often we log by time-stamp
- after lunch review
- named tuple, zip, deque, iter etc
- end of course feedbacks (internal and Neueda)
    https://easyretro.io/publicboard/NTDqkkm6utgJFD9cdBrdb4sI6n72/a97a4306-a407-4327-a428-9dad2e85d4f2
    https://apps.powerapps.com/play/17579985-153c-4727-b1f4-8b53e48b5e72?tenantId=92e84ceb-fbfd-47ab-be52-080c6b87953f&Type=ILT&ID=LZU1500681&OID=514729&Title=Advanced%20Python%20&Owner=Sachin%20Srivastava%20B

Course Website
https://neueda.conygre.com/Sites/Ericsson_Further_Advanced_Python/site/index.html
Recordings:



Other Useful Resources
- https://pynative.com/python-exercises-with-solutions/
- https://realpython.com/
- moving from Py2 to Py3
  https://docs.python.org/3/howto/pyporting.html